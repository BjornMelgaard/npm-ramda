tests/test.ts:curriedFourNumbers(1)(2);

Expected type
  (t2: number) => number // CurriedFunction2<number, number, number>
but got:
  CurriedFunction2<number, number, number>

tests/test.ts:curriedFourNumbers(1)(2)(3);

Expected type
  <T1,R>(t1: T1) => R
but got:
  (t2: number) => number

tests/test.ts:curriedFourNumbers(1,2,4);

Expected type
  <T1,R>(t1: T1) => R
but got:
  (t4: number) => number

tests/test.ts:R.nAry(0, takesNoArg);

Expected type
  () => boolean
but got:
  Variadic<boolean>

tests/test.ts:R.nAry(0, takesOneArg);

Expected type
  () => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.nAry(1, takesTwoArgs);

Expected type
  (a: number) => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.nAry(1, takesThreeArgs);

Expected type
  (a: number) => number[]
but got:
  Variadic<number[]>

tests/test.ts:R.binary(takesTwoArgs);

Expected type
  (a: number, b: number) => number[]
but got:
  (a: any, b: any) => number[]

tests/test.ts:R.binary(takesThreeArgs);

Expected type
  (a: number, b: number) => number[]
but got:
  (a: any, b: any) => number[]

tests/test.ts:let addTwoNumbersCurried = R.curry(addTwoNumbers);

Expected type
  CurriedFunction2<number, number, number>
but got:
  any

tests/test.ts:const coerceArray = R.unless(R.isArrayLike, R.of);

Expected type
  <a>(v: a|[a]) => [a]
but got:
  any

tests/test.ts:R.unapply(JSON.stringify);

Expected type
  (...args: string[])=>string
but got:
  Variadic<string>

tests/test.ts:const g = R.compose(g3, g2, g1, g0);

Expected type
  (list: number[]) => boolean
but got:
  any

tests/test.ts:const capitalize = (str: string) => R.pipe(
        R.split(''),
        R.adjust(R.toUpper, 0),
        R.join('')
    )(str);

Expected type
  string
but got:
  any

tests/test.ts: Unexpected error
  'Promise' only refers to a type, but is being used as a value here.

tests/test.ts: Unexpected error
  'Promise' only refers to a type, but is being used as a value here.

tests/test.ts:R.invoker<string>(0, 'charAt', 'foo');

Expected type
  string
but got:
  any

tests/test.ts:R.invoker<string>(1, 'charAt', 'foo', 1);

Expected type
  string
but got:
  any

tests/test.ts:R.clone([{},{},{}]);

Expected type
  Object[]
but got:
  {}[]

tests/test.ts: Unexpected error
  Argument of type 'null' is not assignable to parameter of type 'string'.

tests/test.ts: Unexpected error
  Argument of type '(n: number) => false | number[]' is not assignable to parameter of type '(seed: number) => false | [{}, number]'.
  Type 'false | number[]' is not assignable to type 'false | [{}, number]'.
    Type 'number[]' is not assignable to type 'false | [{}, number]'.
      Type 'number[]' is not assignable to type '[{}, number]'.
        Property '0' is missing in type 'number[]'.

tests/test.ts: Unexpected error
  Argument of type '(n: number) => false | number[]' is not assignable to parameter of type '(seed: number) => false | [{}, number]'.
  Type 'false | number[]' is not assignable to type 'false | [{}, number]'.
    Type 'number[]' is not assignable to type 'false | [{}, number]'.
      Type 'number[]' is not assignable to type '[{}, number]'.

tests/test.ts:b(10);

Expected type
  number[]
but got:
  TResult[]

tests/test.ts:let peopleByYoungestFirst = R.sort(byAge, people);

Expected type
  typeof people
but got:
  any

tests/test.ts: Unexpected error
  Argument of type '{ <T, U>(el: U, list: ArrayLike<T>): (T & U)[]; <U>(el: U): <T>(list: ArrayLike<T>) => (T & U)[]; }' is not assignable to parameter of type '(v: any) => (list: Chain<any>) => Chain<any>'.

tests/test.ts: Unexpected error
  Argument of type '{ <T, U>(el: U, list: ArrayLike<T>): (T & U)[]; <U>(el: U): <T>(list: ArrayLike<T>) => (T & U)[]; }' is not assignable to parameter of type '(v: any) => (list: Chain<{}>) => Chain<any>'.

tests/test.ts:let peopleByOldestFirst = R.sort(byAge, people);

Expected type
  typeof people
but got:
  any

tests/test.ts: Unexpected error
  Argument of type 'Partial<{ a: number; b: number; c: number; d: number; }>' is not assignable to parameter of type '{ [key: string]: number; }'.
  Property 'a' is incompatible with index signature.
    Type 'number | undefined' is not assignable to type 'number'.
      Type 'undefined' is not assignable to type 'number'.

tests/test.ts:lastTwoFn([8, 6, 7, 5, 3, 0, 9]);

Expected type
  number[]
but got:
  any[]

tests/test.ts:R.findLastIndex((x: number) => x === 1, [1, 2, 3]);

Expected type
  number[]
but got:
  number

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2});

Expected type
  {x: 1, y: 2}
but got:
  { x: number; y: number; }

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue)({x: 1, y: 2});

Expected type
  {x: 1, y: 2}
but got:
  any

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue, [1, 2]);

Expected type
  [1, 2]
but got:
  number[]

tests/test.ts:R.forEachObjIndexed(printKeyConcatValue)([1, 2]);

Expected type
  [1, 2]
but got:
  any

tests/test.ts:byGrade(students);

Expected type
  Dictionary<Object[]>
but got:
  Dictionary<{ score: number; name: string; }[]>

tests/test.ts:R.indexBy(R.prop('id'), list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<{}>

tests/test.ts:R.indexBy(R.prop('id'))(list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<{}>

tests/test.ts:R.indexBy<{id: string}>(R.prop('id'))(list);

Expected type
  Dictionary<Object>
but got:
  Dictionary<{ id: string; }>

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  {}[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  {}[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')))(buffaloSpringfield, csny);

Expected type
  { id: number, name: string }[]
but got:
  {}[]

tests/test.ts:R.intersectionWith(R.eqBy(R.prop('id')))(buffaloSpringfield)(csny);

Expected type
  { id: number, name: string }[]
but got:
  {}[]

tests/test.ts: Unexpected error
  Supplied parameters do not match any signature of call target.

tests/test.ts: Unexpected error
  Supplied parameters do not match any signature of call target.

tests/test.ts:namesByGrade(students);

Expected type
  Dictionary<string[]>
but got:
  string[]

tests/test.ts:R.clone(obj1);

Expected type
  any[]
but got:
  {}[]

tests/test.ts:R.clone(obj2);

Expected type
  {a: number}[]
but got:
  { a: number; }[]

tests/test.ts:R.clone({});

Expected type
  Object
but got:
  {}

tests/test.ts:R.eqProps('c');

Expected type
  {<T,U>(obj1: T, obj2: U): boolean}
but got:
  { <T, U>(obj1: T, obj2: U): boolean; <T>(obj1: T): <U>(obj2: U) => boolean; }

tests/test.ts:R.eqProps('c', o1);

Expected type
  {<U>(obj2: U): boolean}
but got:
  <U>(obj2: U) => boolean

tests/test.ts: Unexpected error
  Type '{}' is not assignable to type '{ firstName: string; data: { elapsed: number; remaining: number; }; id: number; }'.
  Property 'firstName' is missing in type '{}'.

tests/test.ts:R.invert(raceResultsByFirstName);

Expected type
  Dictionary<string[]>
but got:
  Dictionary<ArrayLike<string>>

tests/test.ts:R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });

Expected type
  Dictionary<any>
but got:
  { 'name': string; 'age': number; } & { 'age': number; }

tests/test.ts:R.mergeWith(R.concat,
        { a: true, values: [10, 20] },
        { b: true, values: [15, 35] });

Expected type
  { a: boolean, b: boolean, values: number[] }
but got:
  { a: boolean; values: number[]; } & { b: boolean; values: number[]; }

tests/test.ts:merge({ a: true, thing: 'foo', values: [10, 20] }, { b: true, thing: 'bar', values: [15, 35] });

Expected type
  { a: boolean, b: boolean, values: number[], thing: string }
but got:
  { a: boolean; thing: string; values: number[]; } & { b: boolean; thing: string; values: number[]; }

tests/test.ts:R.pickBy(isPositive, {a: 1, b: 2, c: -1, d: 0, e: 5});

Expected type
  Dictionary<number>
but got:
  Partial<{ a: number; b: number; c: number; d: number; e: number; }>

tests/test.ts:R.pickBy(containsBackground, colors);

Expected type
  { 2: R.Dictionary<string> }
but got:
  Partial<{ 1: { color: string; }; 2: { color: string; bgcolor: string; }; }>

tests/test.ts:matchPhrases(['foo', 'bar', 'baz']);

Expected type
  { must: { match_phrase: string }[] }
but got:
  Record<"must", {}>

tests/test.ts: Unexpected error
  Argument of type '{}' is not assignable to parameter of type 'Record<"x", {}>'.
  Property 'x' is missing in type '{}'.

tests/test.ts: Unexpected error
  Argument of type '{ name: string; age: number; }' is not assignable to parameter of type 'Record<"favoriteLibrary", {}>'.
  Property 'favoriteLibrary' is missing in type '{ name: string; age: number; }'.

tests/test.ts: Unexpected error
  Cannot invoke an expression whose type lacks a call signature. Type 'Struct<any>' has no compatible call signatures.

tests/test.ts:let pred = R.whereEq({a: 1, b: 2});

Expected type
  (v: Object) => Boolean
but got:
  any

tests/test.ts: Unexpected error
  Argument of type '{ a: number; }' is not assignable to parameter of type '{ a: number; b: number; }'.
  Property 'b' is missing in type '{ a: number; }'.

tests/test.ts: Unexpected error
  Argument of type '{ a: number; b: number; c: number; }' is not assignable to parameter of type '{ a: number; b: number; }'.
  Object literal may only specify known properties, and 'c' does not exist in type '{ a: number; b: number; }'.

tests/test.ts:reduceIndexed(
      (acc: string, val: string, idx: number) => acc + ',' + idx + '-' + val
      ,''
      ,['f', 'o', 'o', 'b', 'a', 'r']
    );

Expected type
  string[]
but got:
  any

tests/test.ts:R.sort(cmp, people);

Expected type
  { age: number, name: string }[]
but got:
  T[]

tests/test.ts:circleN(1, 'red');

Expected type
  circle
but got:
  any

tests/test.ts:circle(1, 'red');

Expected type
  circle
but got:
  any

tests/test.ts:R.sortWith([
    R.descend(R.prop('age')),
    R.ascend(R.prop('name'))
  ], people);

Expected type
  typeof people
but got:
  {}[]

tests/test.ts:ageNameSort(people);

Expected type
  typeof people
but got:
  {}[]

tests/test.ts:R.minBy(cmp)(a)(c);

Expected type
  { x: number }
but got:
  { x: number; }

tests/test.ts:R.minBy(cmp, d, e);

Expected type
  { x: number }
but got:
  T

tests/test.ts:R.evolve({ a: R.add(1)}, test );

Expected type
  { a: number, b: number }
but got:
  { a: number; b: number; }

tests/test.ts: Unexpected error
  Type '{}[]' is not assignable to type 'number[]'.
  Type '{}' is not assignable to type 'number'.

tests/test.ts:R.pipe(R.append('a'), R.uniq)(['a', 'b', 'c']);

Expected type
  string[]
but got:
  ({} & string)[]

tests/test.ts: Unexpected error
  Argument of type '(x0: any) => {}' is not assignable to parameter of type 'UnknownLens | ManualLens<{}> | Lens<any, {}>'.
  Type '(x0: any) => {}' is not assignable to type 'Lens<any, {}>'.
    Property 'set' is missing in type '(x0: any) => {}'.

tests/test.ts:updateBy((n: number) => n > 1, 0, [1,2,3]);

Expected type
  number[]
but got:
  {}[]

tests/test.ts:R.fromPairs ([['1','A'], ['2','B'], ['3','C']]);

Expected type
  { [index: string]: string }
but got:
  Dictionary<string>

tests/test.ts: Unexpected error
  The type argument for type parameter 'V' cannot be inferred from the usage. Consider specifying the type arguments explicitly.
  Type argument candidate 'string' is not a valid type argument because it is not a supertype of candidate 'string[]'.

tests/test.ts:const x = R.cond([ // $ExpectType <T>(v: T) => T
        [R.F, R.F],
        [R.T, R.identity]
    ]);

Expected type
  <T>(v: T) => T
but got:
  any

tests/test.ts: Unexpected error
  Type '{ a: number[]; } & {}' is not assignable to type 'SomeStruct'.
  Property 'b' is missing in type '{ a: number[]; } & {}'.

tests/test.ts:R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);

Expected type
  number[]
but got:
  (number | (number | (number | (number | number[])[])[])[])[]

tests/test.ts: 57 / 139 checks passed.
